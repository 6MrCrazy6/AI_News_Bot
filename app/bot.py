import asyncio
import os
import scheduler
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from dotenv import load_dotenv

from db import get_connection, init_db, add_reaction, get_news_reactions
from db import get_source_reaction_stats, get_news_by_message_id
from common import TOKEN, CHANNEL_ID, logger, set_bot

current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)
env_path = os.path.join(project_root, "keys", "keys.env")

load_dotenv(dotenv_path=env_path)

init_db()

if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN environment variable is not set")

if not CHANNEL_ID:
    raise ValueError("TG_CHANNEL_ID environment variable is not set")

admin_router = Router()
bot = Bot(token=TOKEN)
dp = Dispatcher()

set_bot(bot)

dp.include_router(admin_router)


# Admin commands
@admin_router.message(Command("stats"))
async def cmd_stats(message: Message):
    yesterday = datetime.now() - timedelta(days=1)
    yesterday_str = yesterday.strftime("%Y-%m-%d %H:%M:%S")

    last_week = datetime.now() - timedelta(days=7)
    last_week_str = last_week.strftime("%Y-%m-%d %H:%M:%S")

    with get_connection() as conn:
        cursor = conn.execute(
            "SELECT COUNT(*) FROM news_items WHERE processed_at >= ?",
            (yesterday_str,)
        )
        daily_count = cursor.fetchone()[0]

        cursor = conn.execute(
            "SELECT COUNT(*) FROM news_items WHERE processed_at >= ?",
            (last_week_str,)
        )
        weekly_count = cursor.fetchone()[0]

        cursor = conn.execute(
            "SELECT COUNT(*) FROM news_items WHERE impact >= 4 AND processed_at >= ?",
            (last_week_str,)
        )
        breaking_count = cursor.fetchone()[0]

        cursor = conn.execute(
            """
            SELECT source_id, COUNT(*) 
            FROM news_items 
            WHERE processed_at >= ? 
            GROUP BY source_id
            """,
            (last_week_str,)
        )
        sources_stats = cursor.fetchall()

    # Format stats message
    stats_message = (
        f"üìä *News Stats*\n\n"
        f"Last 24 hours: {daily_count} news items\n"
        f"Last 7 days: {weekly_count} news items\n"
        f"Breaking news (last 7 days): {breaking_count} items\n\n"
        f"*By source (last 7 days):*\n"
    )

    for source_id, count in sources_stats:
        stats_message += f"- {source_id}: {count} items\n"

    await message.answer(stats_message, parse_mode=ParseMode.MARKDOWN)


@admin_router.message(Command("toggle"))
async def cmd_toggle_source(message: Message):
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("Usage: /toggle source_id")
        return

    source_id = parts[1]

    with get_connection() as conn:
        cursor = conn.execute("SELECT active FROM sources WHERE id = ?", (source_id,))
        source = cursor.fetchone()

        if not source:
            await message.answer(f"Source {source_id} not found")
            return

        new_status = 1 - source[0]
        conn.execute("UPDATE sources SET active = ? WHERE id = ?", (new_status, source_id))
        conn.commit()

    config = scheduler.load_config()
    if source_id in config:
        job_id = f"fetch_{source_id}"

        if new_status == 1:
            scheduler.schedule_source(source_id, config[source_id])
            await message.answer(f"Source {source_id} enabled and scheduled")
        else:
            try:
                scheduler.scheduler.remove_job(job_id)
                await message.answer(f"Source {source_id} disabled and unscheduled")
            except Exception as e:
                logger.error(f"Error removing job: {e}")
                await message.answer(f"Source {source_id} disabled, but scheduler error occurred")
    else:
        status_text = "enabled" if new_status == 1 else "disabled"
        await message.answer(f"Source {source_id} {status_text}, but not found in config")


@admin_router.message(Command("process_source"))
async def cmd_process_source(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä—É—á–Ω—É—é"""
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("Usage: /process_source source_id")
        return

    source_id = parts[1]
    result = await scheduler.process_single_source(source_id)
    await message.answer(result)


@admin_router.message(Command("digest"))
async def cmd_digest(message: Message):
    parts = message.text.split()
    if len(parts) != 2 or parts[1] != "now":
        await message.answer("Usage: /digest now")
        return

    sent_count = await scheduler.send_digest()
    await message.answer(f"Sent digest with {sent_count} news items")


@admin_router.message(Command("breaking"))
async def cmd_breaking(message: Message):
    sent_count = await scheduler.send_breaking_news()
    await message.answer(f"Sent {sent_count} breaking news items")



# Health check command
@admin_router.message(Command("healthz"))
async def cmd_healthz(message: Message):
    with get_connection() as conn:
        cursor = conn.execute("SELECT COUNT(*) FROM news_items WHERE sent = 0")
        queue_count = cursor.fetchone()[0]

    await message.answer(f"OK. Queue size: {queue_count}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
@admin_router.message(Command("source_stats"))
async def cmd_source_reactions_stats(message: Message):
    parts = message.text.split()
    period_days = 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞ 30 –¥–Ω–µ–π

    if len(parts) > 1 and parts[1].isdigit():
        period_days = int(parts[1])

    stats = get_source_reaction_stats(period_days)

    if not stats:
        await message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∞–∫—Ü–∏—è—Ö –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π")
        return

    stats_message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞ {period_days} –¥–Ω–µ–π*\n\n"

    for source_id, news_count, likes, dislikes in stats:
        if likes > 0 or dislikes > 0 or news_count > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            total = likes + dislikes
            like_percent = int((likes / total) * 100) if total > 0 else 0

            engagement_rate = round((total / news_count) * 100, 1) if news_count > 0 else 0

            stats_message += (
                f"*{source_id}*\n"
                f"‚Ä¢ –ù–æ–≤–æ—Å—Ç–µ–π: {news_count}\n"
                f"‚Ä¢ –†–µ–∞–∫—Ü–∏–π: {total} (üëç {likes}, üëé {dislikes})\n"
                f"‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {like_percent}% –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö\n"
                f"‚Ä¢ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {engagement_rate}%\n\n"
            )

    await message.answer(stats_message, parse_mode=ParseMode.MARKDOWN)


# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–æ–ø-50 –Ω–æ–≤–æ—Å—Ç–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –ª–∞–π–∫–æ–≤
@admin_router.message(Command("top_news"))
async def cmd_top_news(message: Message):
    parts = message.text.split()
    period_days = 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞ 30 –¥–Ω–µ–π
    limit = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ø-10

    if len(parts) > 1 and parts[1].isdigit():
        period_days = int(parts[1])

    if len(parts) > 2 and parts[2].isdigit():
        limit = min(50, int(parts[2]))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 50 –∑–∞–ø–∏—Å–µ–π

    period_date = datetime.now() - timedelta(days=period_days)
    period_str = period_date.strftime("%Y-%m-%d %H:%M:%S")

    with get_connection() as conn:
        cursor = conn.execute(
            """
            SELECT 
                n.id, 
                n.title, 
                n.source_id,
                n.url,
                (SELECT COUNT(*) FROM news_reactions WHERE news_id = n.id AND reaction_type = 'like') as likes,
                (SELECT COUNT(*) FROM news_reactions WHERE news_id = n.id AND reaction_type = 'dislike') as dislikes
            FROM 
                news_items n
            WHERE
                n.processed_at >= ?
            ORDER BY
                likes DESC, dislikes ASC
            LIMIT ?
            """,
            (period_str, limit)
        )
        top_news = cursor.fetchall()

    if not top_news:
        await message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π")
        return

    stats_message = f"üèÜ *–¢–æ–ø-{limit} –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {period_days} –¥–Ω–µ–π*\n\n"

    for i, (news_id, title, source_id, url, likes, dislikes) in enumerate(top_news, 1):
        total = likes + dislikes
        like_percent = int((likes / total) * 100) if total > 0 else 0

        stats_message += (
            f"{i}. *{title}*\n"
            f"‚Ä¢ üëç {likes} / üëé {dislikes} ({like_percent}% –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö)\n"
            f"‚Ä¢ [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({url})\n\n"
        )

    await message.answer(stats_message, parse_mode=ParseMode.MARKDOWN)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —è–∑—ã–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
@admin_router.message(Command("language_stats"))
async def cmd_language_stats(message: Message):
    period_days = 7

    parts = message.text.split()
    if len(parts) > 1 and parts[1].isdigit():
        period_days = int(parts[1])

    period_date = datetime.now() - timedelta(days=period_days)
    period_str = period_date.strftime("%Y-%m-%d %H:%M:%S")

    with get_connection() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
        cursor = conn.execute(
            "SELECT COUNT(*) FROM news_items WHERE processed_at >= ?",
            (period_str,)
        )
        total_count = cursor.fetchone()[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –ø–æ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —è–∑—ã–∫–∞
        cursor = conn.execute("PRAGMA table_info(news_items)")
        columns = [col[1] for col in cursor.fetchall()]

        if "summary_lang" not in columns:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è –¥–ª—è —è–∑—ã–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            try:
                logger.info("Adding summary_lang column to news_items table")
                conn.execute("ALTER TABLE news_items ADD COLUMN summary_lang TEXT")
                conn.commit()

                # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                stats_message = (
                    f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è–∑—ã–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {period_days} –¥–Ω–µ–π*\n\n"
                    f"–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_count}\n\n"
                    f"–ü–æ–ª–µ 'summary_lang' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É news_items.\n"
                    f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è–∑—ã–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."
                )
            except Exception as e:
                stats_message = (
                    f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è–∑—ã–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π*\n\n"
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è 'summary_lang': {e}\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã."
                )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª–µ –µ—Å—Ç—å, –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor = conn.execute(
                """
                SELECT 
                    summary_lang, 
                    COUNT(*) as count 
                FROM 
                    news_items 
                WHERE 
                    processed_at >= ? 
                    AND summary_lang IS NOT NULL
                GROUP BY 
                    summary_lang
                ORDER BY 
                    count DESC
                """,
                (period_str,)
            )
            lang_stats = cursor.fetchall()

            stats_message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è–∑—ã–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {period_days} –¥–Ω–µ–π*\n\n"
            stats_message += f"–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_count}\n\n"

            total_with_lang = sum(count for _, count in lang_stats)

            for lang, count in lang_stats:
                percent = round((count / total_count) * 100, 1) if total_count > 0 else 0
                lang_name = "–†—É—Å—Å–∫–∏–π" if lang == "ru" else "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" if lang == "en" else lang
                stats_message += f"‚Ä¢ {lang_name}: {count} ({percent}%)\n"

            if total_with_lang < total_count:
                unknown = total_count - total_with_lang
                unknown_percent = round((unknown / total_count) * 100, 1)
                stats_message += f"‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —è–∑—ã–∫–µ: {unknown} ({unknown_percent}%)\n"

    await message.answer(stats_message, parse_mode=ParseMode.MARKDOWN)


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–∞–π–ª bot.py –≤ —Å–µ–∫—Ü–∏—é admin_router:

@admin_router.message(Command("list_sources"))
async def cmd_list_sources(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º"""
    config = scheduler.load_config()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–≤–∫–ª—é—á–µ–Ω/–æ—Ç–∫–ª—é—á–µ–Ω)
    with get_connection() as conn:
        source_status = {}
        cursor = conn.execute("SELECT id, active FROM sources")
        for source_id, active in cursor.fetchall():
            source_status[source_id] = bool(active)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    sources_message = "üìã *–°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π*\n\n"

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ —è–∑—ã–∫—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    en_sources = []
    ru_sources = []
    other_sources = []

    for source_id, source_config in config.items():
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏ —è–∑—ã–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source_type = source_config.get('type', 'unknown')
        lang = source_config.get('lang', 'en')
        interval = source_config.get('interval', 15)

        status = "‚úÖ" if source_status.get(source_id, True) else "‚ùå"

        source_info = f"{status} `{source_id}` - {source_type} (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {interval} –º–∏–Ω)"

        if lang == "ru":
            ru_sources.append(source_info)
        elif lang == "en":
            en_sources.append(source_info)
        else:
            other_sources.append(source_info)

    if en_sources:
        sources_message += "*–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:*\n"
        sources_message += "\n".join(en_sources)
        sources_message += "\n\n"

    if ru_sources:
        sources_message += "*–†—É—Å—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:*\n"
        sources_message += "\n".join(ru_sources)
        sources_message += "\n\n"

    if other_sources:
        sources_message += "*–î—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:*\n"
        sources_message += "\n".join(other_sources)
        sources_message += "\n\n"

    sources_message += "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏:*\n"
    sources_message += "‚Ä¢ `/toggle ID` - –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n"
    sources_message += "‚Ä¢ `/process_source ID` - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫\n"

    await message.answer(sources_message, parse_mode=ParseMode.MARKDOWN)


# –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:
@admin_router.message(Command("source_info"))
async def cmd_source_info(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–¥–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É"""
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /source_info ID_–∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        return

    source_id = parts[1]

    config = scheduler.load_config()
    if source_id not in config:
        await message.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫ —Å ID '{source_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return

    source_config = config[source_id]
    source_type = source_config.get('type', 'unknown')
    lang = source_config.get('lang', 'unknown')
    interval = source_config.get('interval', 0)
    url = source_config.get('url', '')

    with get_connection() as conn:
        cursor = conn.execute("SELECT active FROM sources WHERE id = ?", (source_id,))
        source = cursor.fetchone()
        active = bool(source[0]) if source else False

        cursor = conn.execute(
            "SELECT COUNT(*) FROM news_items WHERE source_id = ?",
            (source_id,)
        )
        total_news = cursor.fetchone()[0]

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        cursor = conn.execute(
            """
            SELECT title, impact, processed_at 
            FROM news_items 
            WHERE source_id = ? 
            ORDER BY processed_at DESC 
            LIMIT 5
            """,
            (source_id,)
        )
        recent_news = cursor.fetchall()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
        cursor = conn.execute(
            """
            SELECT 
                COUNT(DISTINCT CASE WHEN r.reaction_type = 'like' THEN r.id END) as likes,
                COUNT(DISTINCT CASE WHEN r.reaction_type = 'dislike' THEN r.id END) as dislikes
            FROM 
                news_items n
            LEFT JOIN
                news_reactions r ON n.id = r.news_id
            WHERE
                n.source_id = ?
            """,
            (source_id,)
        )
        likes, dislikes = cursor.fetchone()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if active else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"

    info_message = (
        f"üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏—Å—Ç–æ—á–Ω–∏–∫–µ: {source_id}*\n\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n"
        f"‚Ä¢ –¢–∏–ø: {source_type}\n"
        f"‚Ä¢ –Ø–∑—ã–∫: {lang}\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {interval} –º–∏–Ω—É—Ç\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}\n"
        f"‚Ä¢ –†–µ–∞–∫—Ü–∏–∏: üëç {likes} / üëé {dislikes}\n\n"
    )

    if url:
        info_message += f"‚Ä¢ URL: `{url}`\n\n"

    if recent_news:
        info_message += "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:*\n"
        for title, impact, date in recent_news:
            stars = "‚òÖ" * impact
            info_message += f"{stars} {title[:30]}{'...' if len(title) > 30 else ''}\n"
    else:
        info_message += "*–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞*\n"

    await message.answer(info_message, parse_mode=ParseMode.MARKDOWN)

@admin_router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """
üì± *AI News Bot - –ö–æ–º–∞–Ω–¥—ã*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
- `/help` - –û–±—ä—è—Å–Ω—è–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏
- `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
- `/top_news [–¥–Ω–µ–π] [—á–∏—Å–ª–æ]` - –¢–æ–ø-N –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ª–∞–π–∫–∞–º
- `/source_stats [–¥–Ω–µ–π]` - –†–µ–π—Ç–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
- `/language_stats [–¥–Ω–µ–π]` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è–∑—ã–∫–æ–≤ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö
- `/healthz` - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
- `/list_sources` - –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π

*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*
- `/toggle [source_id]` - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
- `/process_source [source_id]` - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä—É—á–Ω—É—é
- `/digest now` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π —Å–µ–π—á–∞—Å
- `/breaking` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å
- `/reactions [–¥–Ω–µ–π]` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º
- `/source_info [source_id]` - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
- `/db_status` - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*
1. AI News Bot –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
2. –ü–æ–¥ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç—å—é –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ üëç / üëé –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
3. –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ
4. –ù–æ–≤–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (RSS, API, GitHub –∏ –¥—Ä.)

*–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π:*
- –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (‚òÖ‚òÖ‚òÖ‚òÖ/‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ) –ø—É–±–ª–∏–∫—É—é—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
- –û–±—ã—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç (7:30 —É—Ç—Ä–∞)
- –ù–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞—é—Ç—Å—è –∏–∑ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã—Ö –∏ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
- –°–æ–æ–±—â–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ò–ò –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""

    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query()
async def process_callback(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç message_id –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ callback –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ callback_data —Å 'reaction:'
    if not callback_query.data.startswith('reaction:'):
        await callback_query.answer()
        return

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = callback_query.data.split(':')
        if len(parts) != 3:
            logger.warning(f"Invalid callback data format: {callback_query.data}")
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        _, news_id_str, reaction_type = parts

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ news_id - —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            news_id = int(news_id_str)
        except ValueError:
            # –ï—Å–ª–∏ news_id –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ –ø–æ message_id
            logger.warning(f"Invalid news_id format: {news_id_str}, trying to find by message_id")
            news_id = get_news_by_message_id(callback_query.message.message_id)
            if not news_id:
                logger.error(f"Could not find news_id for message_id {callback_query.message.message_id}")
                await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç—å")
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏
        if reaction_type not in ('like', 'dislike'):
            logger.warning(f"Invalid reaction type: {reaction_type}")
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username or callback_query.from_user.first_name

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = add_reaction(news_id, callback_query.message.message_id, reaction_type, user_id, username)
        if not success:
            logger.warning(f"Failed to add reaction for user {user_id} on news {news_id}")
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É —Ä–µ–∞–∫—Ü–∏—é")
            return

        reactions = get_news_reactions(news_id)
        likes = 0
        dislikes = 0
        for r_type, count in reactions:
            if r_type == 'like':
                likes = count
            elif r_type == 'dislike':
                dislikes = count

        buttons = [
            [
                InlineKeyboardButton(text=f"üëç {likes}", callback_data=f"reaction:{news_id}:like"),
                InlineKeyboardButton(text=f"üëé {dislikes}", callback_data=f"reaction:{news_id}:dislike")
            ]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        try:
            await bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=keyboard
            )

            if reaction_type == 'like':
                await callback_query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –ª–∞–π–∫! üëç")
            else:
                await callback_query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à —Ñ–∏–¥–±–µ–∫! üëé")

        except Exception as e:
            if "Too Many Requests" in str(e) or "Flood control" in str(e):
                await callback_query.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}")
                await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏")
    except Exception as e:
        logger.error(f"Unexpected error in callback processing: {e}")
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏")
        except:
            pass




async def start_services():
    logger.info("Starting scheduler")
    await scheduler.init_scheduler()

    logger.info("Starting bot")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(start_services())